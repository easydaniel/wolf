// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoteHistory is an object representing the database table.
type VoteHistory struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	HistoryID int         `boil:"history_id" json:"history_id" toml:"history_id" yaml:"history_id"`
	Target    null.String `boil:"target" json:"target,omitempty" toml:"target" yaml:"target,omitempty"`

	R *voteHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voteHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoteHistoryColumns = struct {
	ID        string
	Name      string
	HistoryID string
	Target    string
}{
	ID:        "id",
	Name:      "name",
	HistoryID: "history_id",
	Target:    "target",
}

var VoteHistoryTableColumns = struct {
	ID        string
	Name      string
	HistoryID string
	Target    string
}{
	ID:        "vote_history.id",
	Name:      "vote_history.name",
	HistoryID: "vote_history.history_id",
	Target:    "vote_history.target",
}

// Generated where

var VoteHistoryWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	HistoryID whereHelperint
	Target    whereHelpernull_String
}{
	ID:        whereHelperint{field: "\"vote_history\".\"id\""},
	Name:      whereHelperstring{field: "\"vote_history\".\"name\""},
	HistoryID: whereHelperint{field: "\"vote_history\".\"history_id\""},
	Target:    whereHelpernull_String{field: "\"vote_history\".\"target\""},
}

// VoteHistoryRels is where relationship names are stored.
var VoteHistoryRels = struct {
}{}

// voteHistoryR is where relationships are stored.
type voteHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*voteHistoryR) NewStruct() *voteHistoryR {
	return &voteHistoryR{}
}

// voteHistoryL is where Load methods for each relationship are stored.
type voteHistoryL struct{}

var (
	voteHistoryAllColumns            = []string{"id", "name", "history_id", "target"}
	voteHistoryColumnsWithoutDefault = []string{"id", "name"}
	voteHistoryColumnsWithDefault    = []string{"history_id", "target"}
	voteHistoryPrimaryKeyColumns     = []string{"history_id"}
	voteHistoryGeneratedColumns      = []string{}
)

type (
	// VoteHistorySlice is an alias for a slice of pointers to VoteHistory.
	// This should almost always be used instead of []VoteHistory.
	VoteHistorySlice []*VoteHistory
	// VoteHistoryHook is the signature for custom VoteHistory hook methods
	VoteHistoryHook func(context.Context, boil.ContextExecutor, *VoteHistory) error

	voteHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voteHistoryType                 = reflect.TypeOf(&VoteHistory{})
	voteHistoryMapping              = queries.MakeStructMapping(voteHistoryType)
	voteHistoryPrimaryKeyMapping, _ = queries.BindMapping(voteHistoryType, voteHistoryMapping, voteHistoryPrimaryKeyColumns)
	voteHistoryInsertCacheMut       sync.RWMutex
	voteHistoryInsertCache          = make(map[string]insertCache)
	voteHistoryUpdateCacheMut       sync.RWMutex
	voteHistoryUpdateCache          = make(map[string]updateCache)
	voteHistoryUpsertCacheMut       sync.RWMutex
	voteHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voteHistoryAfterSelectHooks []VoteHistoryHook

var voteHistoryBeforeInsertHooks []VoteHistoryHook
var voteHistoryAfterInsertHooks []VoteHistoryHook

var voteHistoryBeforeUpdateHooks []VoteHistoryHook
var voteHistoryAfterUpdateHooks []VoteHistoryHook

var voteHistoryBeforeDeleteHooks []VoteHistoryHook
var voteHistoryAfterDeleteHooks []VoteHistoryHook

var voteHistoryBeforeUpsertHooks []VoteHistoryHook
var voteHistoryAfterUpsertHooks []VoteHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VoteHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VoteHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VoteHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VoteHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VoteHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VoteHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VoteHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VoteHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VoteHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voteHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoteHistoryHook registers your hook function for all future operations.
func AddVoteHistoryHook(hookPoint boil.HookPoint, voteHistoryHook VoteHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voteHistoryAfterSelectHooks = append(voteHistoryAfterSelectHooks, voteHistoryHook)
	case boil.BeforeInsertHook:
		voteHistoryBeforeInsertHooks = append(voteHistoryBeforeInsertHooks, voteHistoryHook)
	case boil.AfterInsertHook:
		voteHistoryAfterInsertHooks = append(voteHistoryAfterInsertHooks, voteHistoryHook)
	case boil.BeforeUpdateHook:
		voteHistoryBeforeUpdateHooks = append(voteHistoryBeforeUpdateHooks, voteHistoryHook)
	case boil.AfterUpdateHook:
		voteHistoryAfterUpdateHooks = append(voteHistoryAfterUpdateHooks, voteHistoryHook)
	case boil.BeforeDeleteHook:
		voteHistoryBeforeDeleteHooks = append(voteHistoryBeforeDeleteHooks, voteHistoryHook)
	case boil.AfterDeleteHook:
		voteHistoryAfterDeleteHooks = append(voteHistoryAfterDeleteHooks, voteHistoryHook)
	case boil.BeforeUpsertHook:
		voteHistoryBeforeUpsertHooks = append(voteHistoryBeforeUpsertHooks, voteHistoryHook)
	case boil.AfterUpsertHook:
		voteHistoryAfterUpsertHooks = append(voteHistoryAfterUpsertHooks, voteHistoryHook)
	}
}

// One returns a single voteHistory record from the query.
func (q voteHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VoteHistory, error) {
	o := &VoteHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vote_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VoteHistory records from the query.
func (q voteHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoteHistorySlice, error) {
	var o []*VoteHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VoteHistory slice")
	}

	if len(voteHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VoteHistory records in the query.
func (q voteHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vote_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voteHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vote_history exists")
	}

	return count > 0, nil
}

// VoteHistories retrieves all the records using an executor.
func VoteHistories(mods ...qm.QueryMod) voteHistoryQuery {
	mods = append(mods, qm.From("\"vote_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vote_history\".*"})
	}

	return voteHistoryQuery{q}
}

// FindVoteHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoteHistory(ctx context.Context, exec boil.ContextExecutor, historyID int, selectCols ...string) (*VoteHistory, error) {
	voteHistoryObj := &VoteHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vote_history\" where \"history_id\"=$1", sel,
	)

	q := queries.Raw(query, historyID)

	err := q.Bind(ctx, exec, voteHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vote_history")
	}

	if err = voteHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return voteHistoryObj, err
	}

	return voteHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoteHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vote_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voteHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voteHistoryInsertCacheMut.RLock()
	cache, cached := voteHistoryInsertCache[key]
	voteHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voteHistoryAllColumns,
			voteHistoryColumnsWithDefault,
			voteHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voteHistoryType, voteHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voteHistoryType, voteHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vote_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vote_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vote_history")
	}

	if !cached {
		voteHistoryInsertCacheMut.Lock()
		voteHistoryInsertCache[key] = cache
		voteHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VoteHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoteHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voteHistoryUpdateCacheMut.RLock()
	cache, cached := voteHistoryUpdateCache[key]
	voteHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voteHistoryAllColumns,
			voteHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vote_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vote_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voteHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voteHistoryType, voteHistoryMapping, append(wl, voteHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vote_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vote_history")
	}

	if !cached {
		voteHistoryUpdateCacheMut.Lock()
		voteHistoryUpdateCache[key] = cache
		voteHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voteHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vote_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vote_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoteHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voteHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vote_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voteHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in voteHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all voteHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoteHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vote_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voteHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voteHistoryUpsertCacheMut.RLock()
	cache, cached := voteHistoryUpsertCache[key]
	voteHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voteHistoryAllColumns,
			voteHistoryColumnsWithDefault,
			voteHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voteHistoryAllColumns,
			voteHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vote_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voteHistoryPrimaryKeyColumns))
			copy(conflict, voteHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vote_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voteHistoryType, voteHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voteHistoryType, voteHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vote_history")
	}

	if !cached {
		voteHistoryUpsertCacheMut.Lock()
		voteHistoryUpsertCache[key] = cache
		voteHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VoteHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoteHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VoteHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voteHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"vote_history\" WHERE \"history_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vote_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vote_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voteHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no voteHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vote_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vote_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoteHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voteHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voteHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vote_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voteHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voteHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vote_history")
	}

	if len(voteHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoteHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoteHistory(ctx, exec, o.HistoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoteHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoteHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voteHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vote_history\".* FROM \"vote_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voteHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VoteHistorySlice")
	}

	*o = slice

	return nil
}

// VoteHistoryExists checks if the VoteHistory row exists.
func VoteHistoryExists(ctx context.Context, exec boil.ContextExecutor, historyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vote_history\" where \"history_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, historyID)
	}
	row := exec.QueryRowContext(ctx, sql, historyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vote_history exists")
	}

	return exists, nil
}

// Exists checks if the VoteHistory row exists.
func (o *VoteHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VoteHistoryExists(ctx, exec, o.HistoryID)
}
