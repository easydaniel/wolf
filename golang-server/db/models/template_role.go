// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TemplateRole is an object representing the database table.
type TemplateRole struct {
	Roleid       int      `boil:"roleid" json:"roleid" toml:"roleid" yaml:"roleid"`
	Number       int      `boil:"number" json:"number" toml:"number" yaml:"number"`
	Name         string   `boil:"name" json:"name" toml:"name" yaml:"name"`
	Darkpriority null.Int `boil:"darkpriority" json:"darkpriority,omitempty" toml:"darkpriority" yaml:"darkpriority,omitempty"`

	R *templateRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L templateRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplateRoleColumns = struct {
	Roleid       string
	Number       string
	Name         string
	Darkpriority string
}{
	Roleid:       "roleid",
	Number:       "number",
	Name:         "name",
	Darkpriority: "darkpriority",
}

var TemplateRoleTableColumns = struct {
	Roleid       string
	Number       string
	Name         string
	Darkpriority string
}{
	Roleid:       "template_role.roleid",
	Number:       "template_role.number",
	Name:         "template_role.name",
	Darkpriority: "template_role.darkpriority",
}

// Generated where

var TemplateRoleWhere = struct {
	Roleid       whereHelperint
	Number       whereHelperint
	Name         whereHelperstring
	Darkpriority whereHelpernull_Int
}{
	Roleid:       whereHelperint{field: "\"template_role\".\"roleid\""},
	Number:       whereHelperint{field: "\"template_role\".\"number\""},
	Name:         whereHelperstring{field: "\"template_role\".\"name\""},
	Darkpriority: whereHelpernull_Int{field: "\"template_role\".\"darkpriority\""},
}

// TemplateRoleRels is where relationship names are stored.
var TemplateRoleRels = struct {
	NameTemplateHeader string
}{
	NameTemplateHeader: "NameTemplateHeader",
}

// templateRoleR is where relationships are stored.
type templateRoleR struct {
	NameTemplateHeader *TemplateHeader `boil:"NameTemplateHeader" json:"NameTemplateHeader" toml:"NameTemplateHeader" yaml:"NameTemplateHeader"`
}

// NewStruct creates a new relationship struct
func (*templateRoleR) NewStruct() *templateRoleR {
	return &templateRoleR{}
}

func (r *templateRoleR) GetNameTemplateHeader() *TemplateHeader {
	if r == nil {
		return nil
	}
	return r.NameTemplateHeader
}

// templateRoleL is where Load methods for each relationship are stored.
type templateRoleL struct{}

var (
	templateRoleAllColumns            = []string{"roleid", "number", "name", "darkpriority"}
	templateRoleColumnsWithoutDefault = []string{"roleid", "number", "name"}
	templateRoleColumnsWithDefault    = []string{"darkpriority"}
	templateRolePrimaryKeyColumns     = []string{"roleid", "name"}
	templateRoleGeneratedColumns      = []string{}
)

type (
	// TemplateRoleSlice is an alias for a slice of pointers to TemplateRole.
	// This should almost always be used instead of []TemplateRole.
	TemplateRoleSlice []*TemplateRole
	// TemplateRoleHook is the signature for custom TemplateRole hook methods
	TemplateRoleHook func(context.Context, boil.ContextExecutor, *TemplateRole) error

	templateRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templateRoleType                 = reflect.TypeOf(&TemplateRole{})
	templateRoleMapping              = queries.MakeStructMapping(templateRoleType)
	templateRolePrimaryKeyMapping, _ = queries.BindMapping(templateRoleType, templateRoleMapping, templateRolePrimaryKeyColumns)
	templateRoleInsertCacheMut       sync.RWMutex
	templateRoleInsertCache          = make(map[string]insertCache)
	templateRoleUpdateCacheMut       sync.RWMutex
	templateRoleUpdateCache          = make(map[string]updateCache)
	templateRoleUpsertCacheMut       sync.RWMutex
	templateRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var templateRoleAfterSelectHooks []TemplateRoleHook

var templateRoleBeforeInsertHooks []TemplateRoleHook
var templateRoleAfterInsertHooks []TemplateRoleHook

var templateRoleBeforeUpdateHooks []TemplateRoleHook
var templateRoleAfterUpdateHooks []TemplateRoleHook

var templateRoleBeforeDeleteHooks []TemplateRoleHook
var templateRoleAfterDeleteHooks []TemplateRoleHook

var templateRoleBeforeUpsertHooks []TemplateRoleHook
var templateRoleAfterUpsertHooks []TemplateRoleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TemplateRole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TemplateRole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TemplateRole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TemplateRole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TemplateRole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TemplateRole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TemplateRole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TemplateRole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TemplateRole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateRoleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTemplateRoleHook registers your hook function for all future operations.
func AddTemplateRoleHook(hookPoint boil.HookPoint, templateRoleHook TemplateRoleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		templateRoleAfterSelectHooks = append(templateRoleAfterSelectHooks, templateRoleHook)
	case boil.BeforeInsertHook:
		templateRoleBeforeInsertHooks = append(templateRoleBeforeInsertHooks, templateRoleHook)
	case boil.AfterInsertHook:
		templateRoleAfterInsertHooks = append(templateRoleAfterInsertHooks, templateRoleHook)
	case boil.BeforeUpdateHook:
		templateRoleBeforeUpdateHooks = append(templateRoleBeforeUpdateHooks, templateRoleHook)
	case boil.AfterUpdateHook:
		templateRoleAfterUpdateHooks = append(templateRoleAfterUpdateHooks, templateRoleHook)
	case boil.BeforeDeleteHook:
		templateRoleBeforeDeleteHooks = append(templateRoleBeforeDeleteHooks, templateRoleHook)
	case boil.AfterDeleteHook:
		templateRoleAfterDeleteHooks = append(templateRoleAfterDeleteHooks, templateRoleHook)
	case boil.BeforeUpsertHook:
		templateRoleBeforeUpsertHooks = append(templateRoleBeforeUpsertHooks, templateRoleHook)
	case boil.AfterUpsertHook:
		templateRoleAfterUpsertHooks = append(templateRoleAfterUpsertHooks, templateRoleHook)
	}
}

// One returns a single templateRole record from the query.
func (q templateRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TemplateRole, error) {
	o := &TemplateRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for template_role")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TemplateRole records from the query.
func (q templateRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (TemplateRoleSlice, error) {
	var o []*TemplateRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TemplateRole slice")
	}

	if len(templateRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TemplateRole records in the query.
func (q templateRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count template_role rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q templateRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if template_role exists")
	}

	return count > 0, nil
}

// NameTemplateHeader pointed to by the foreign key.
func (o *TemplateRole) NameTemplateHeader(mods ...qm.QueryMod) templateHeaderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"name\" = ?", o.Name),
	}

	queryMods = append(queryMods, mods...)

	return TemplateHeaders(queryMods...)
}

// LoadNameTemplateHeader allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (templateRoleL) LoadNameTemplateHeader(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplateRole interface{}, mods queries.Applicator) error {
	var slice []*TemplateRole
	var object *TemplateRole

	if singular {
		var ok bool
		object, ok = maybeTemplateRole.(*TemplateRole)
		if !ok {
			object = new(TemplateRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplateRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplateRole))
			}
		}
	} else {
		s, ok := maybeTemplateRole.(*[]*TemplateRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplateRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplateRole))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateRoleR{}
		}
		args = append(args, object.Name)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateRoleR{}
			}

			for _, a := range args {
				if a == obj.Name {
					continue Outer
				}
			}

			args = append(args, obj.Name)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`template_header`),
		qm.WhereIn(`template_header.name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TemplateHeader")
	}

	var resultSlice []*TemplateHeader
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TemplateHeader")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for template_header")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_header")
	}

	if len(templateHeaderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NameTemplateHeader = foreign
		if foreign.R == nil {
			foreign.R = &templateHeaderR{}
		}
		foreign.R.NameTemplateRoles = append(foreign.R.NameTemplateRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Name == foreign.Name {
				local.R.NameTemplateHeader = foreign
				if foreign.R == nil {
					foreign.R = &templateHeaderR{}
				}
				foreign.R.NameTemplateRoles = append(foreign.R.NameTemplateRoles, local)
				break
			}
		}
	}

	return nil
}

// SetNameTemplateHeader of the templateRole to the related item.
// Sets o.R.NameTemplateHeader to related.
// Adds o to related.R.NameTemplateRoles.
func (o *TemplateRole) SetNameTemplateHeader(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TemplateHeader) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"template_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"name"}),
		strmangle.WhereClause("\"", "\"", 2, templateRolePrimaryKeyColumns),
	)
	values := []interface{}{related.Name, o.Roleid, o.Name}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Name = related.Name
	if o.R == nil {
		o.R = &templateRoleR{
			NameTemplateHeader: related,
		}
	} else {
		o.R.NameTemplateHeader = related
	}

	if related.R == nil {
		related.R = &templateHeaderR{
			NameTemplateRoles: TemplateRoleSlice{o},
		}
	} else {
		related.R.NameTemplateRoles = append(related.R.NameTemplateRoles, o)
	}

	return nil
}

// TemplateRoles retrieves all the records using an executor.
func TemplateRoles(mods ...qm.QueryMod) templateRoleQuery {
	mods = append(mods, qm.From("\"template_role\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"template_role\".*"})
	}

	return templateRoleQuery{q}
}

// FindTemplateRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplateRole(ctx context.Context, exec boil.ContextExecutor, roleid int, name string, selectCols ...string) (*TemplateRole, error) {
	templateRoleObj := &TemplateRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"template_role\" where \"roleid\"=$1 AND \"name\"=$2", sel,
	)

	q := queries.Raw(query, roleid, name)

	err := q.Bind(ctx, exec, templateRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from template_role")
	}

	if err = templateRoleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return templateRoleObj, err
	}

	return templateRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TemplateRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_role provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templateRoleInsertCacheMut.RLock()
	cache, cached := templateRoleInsertCache[key]
	templateRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templateRoleAllColumns,
			templateRoleColumnsWithDefault,
			templateRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templateRoleType, templateRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templateRoleType, templateRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"template_role\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"template_role\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into template_role")
	}

	if !cached {
		templateRoleInsertCacheMut.Lock()
		templateRoleInsertCache[key] = cache
		templateRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TemplateRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TemplateRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	templateRoleUpdateCacheMut.RLock()
	cache, cached := templateRoleUpdateCache[key]
	templateRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templateRoleAllColumns,
			templateRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update template_role, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"template_role\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, templateRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templateRoleType, templateRoleMapping, append(wl, templateRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update template_role row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for template_role")
	}

	if !cached {
		templateRoleUpdateCacheMut.Lock()
		templateRoleUpdateCache[key] = cache
		templateRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q templateRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for template_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for template_role")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplateRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"template_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, templateRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in templateRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all templateRole")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TemplateRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_role provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templateRoleUpsertCacheMut.RLock()
	cache, cached := templateRoleUpsertCache[key]
	templateRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			templateRoleAllColumns,
			templateRoleColumnsWithDefault,
			templateRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			templateRoleAllColumns,
			templateRolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert template_role, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(templateRolePrimaryKeyColumns))
			copy(conflict, templateRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"template_role\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(templateRoleType, templateRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templateRoleType, templateRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert template_role")
	}

	if !cached {
		templateRoleUpsertCacheMut.Lock()
		templateRoleUpsertCache[key] = cache
		templateRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TemplateRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TemplateRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TemplateRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templateRolePrimaryKeyMapping)
	sql := "DELETE FROM \"template_role\" WHERE \"roleid\"=$1 AND \"name\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from template_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for template_role")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templateRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no templateRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from template_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_role")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplateRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(templateRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"template_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from templateRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_role")
	}

	if len(templateRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TemplateRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTemplateRole(ctx, exec, o.Roleid, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplateRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplateRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"template_role\".* FROM \"template_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TemplateRoleSlice")
	}

	*o = slice

	return nil
}

// TemplateRoleExists checks if the TemplateRole row exists.
func TemplateRoleExists(ctx context.Context, exec boil.ContextExecutor, roleid int, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"template_role\" where \"roleid\"=$1 AND \"name\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, roleid, name)
	}
	row := exec.QueryRowContext(ctx, sql, roleid, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if template_role exists")
	}

	return exists, nil
}

// Exists checks if the TemplateRole row exists.
func (o *TemplateRole) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TemplateRoleExists(ctx, exec, o.Roleid, o.Name)
}
