// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TemplateHeader is an object representing the database table.
type TemplateHeader struct {
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Isenabled   null.Bool   `boil:"isenabled" json:"isenabled,omitempty" toml:"isenabled" yaml:"isenabled,omitempty"`

	R *templateHeaderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L templateHeaderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplateHeaderColumns = struct {
	Name        string
	Description string
	Isenabled   string
}{
	Name:        "name",
	Description: "description",
	Isenabled:   "isenabled",
}

var TemplateHeaderTableColumns = struct {
	Name        string
	Description string
	Isenabled   string
}{
	Name:        "template_header.name",
	Description: "template_header.description",
	Isenabled:   "template_header.isenabled",
}

// Generated where

var TemplateHeaderWhere = struct {
	Name        whereHelperstring
	Description whereHelpernull_String
	Isenabled   whereHelpernull_Bool
}{
	Name:        whereHelperstring{field: "\"template_header\".\"name\""},
	Description: whereHelpernull_String{field: "\"template_header\".\"description\""},
	Isenabled:   whereHelpernull_Bool{field: "\"template_header\".\"isenabled\""},
}

// TemplateHeaderRels is where relationship names are stored.
var TemplateHeaderRels = struct {
	NameTemplateRoles string
}{
	NameTemplateRoles: "NameTemplateRoles",
}

// templateHeaderR is where relationships are stored.
type templateHeaderR struct {
	NameTemplateRoles TemplateRoleSlice `boil:"NameTemplateRoles" json:"NameTemplateRoles" toml:"NameTemplateRoles" yaml:"NameTemplateRoles"`
}

// NewStruct creates a new relationship struct
func (*templateHeaderR) NewStruct() *templateHeaderR {
	return &templateHeaderR{}
}

func (r *templateHeaderR) GetNameTemplateRoles() TemplateRoleSlice {
	if r == nil {
		return nil
	}
	return r.NameTemplateRoles
}

// templateHeaderL is where Load methods for each relationship are stored.
type templateHeaderL struct{}

var (
	templateHeaderAllColumns            = []string{"name", "description", "isenabled"}
	templateHeaderColumnsWithoutDefault = []string{"name"}
	templateHeaderColumnsWithDefault    = []string{"description", "isenabled"}
	templateHeaderPrimaryKeyColumns     = []string{"name"}
	templateHeaderGeneratedColumns      = []string{}
)

type (
	// TemplateHeaderSlice is an alias for a slice of pointers to TemplateHeader.
	// This should almost always be used instead of []TemplateHeader.
	TemplateHeaderSlice []*TemplateHeader
	// TemplateHeaderHook is the signature for custom TemplateHeader hook methods
	TemplateHeaderHook func(context.Context, boil.ContextExecutor, *TemplateHeader) error

	templateHeaderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templateHeaderType                 = reflect.TypeOf(&TemplateHeader{})
	templateHeaderMapping              = queries.MakeStructMapping(templateHeaderType)
	templateHeaderPrimaryKeyMapping, _ = queries.BindMapping(templateHeaderType, templateHeaderMapping, templateHeaderPrimaryKeyColumns)
	templateHeaderInsertCacheMut       sync.RWMutex
	templateHeaderInsertCache          = make(map[string]insertCache)
	templateHeaderUpdateCacheMut       sync.RWMutex
	templateHeaderUpdateCache          = make(map[string]updateCache)
	templateHeaderUpsertCacheMut       sync.RWMutex
	templateHeaderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var templateHeaderAfterSelectHooks []TemplateHeaderHook

var templateHeaderBeforeInsertHooks []TemplateHeaderHook
var templateHeaderAfterInsertHooks []TemplateHeaderHook

var templateHeaderBeforeUpdateHooks []TemplateHeaderHook
var templateHeaderAfterUpdateHooks []TemplateHeaderHook

var templateHeaderBeforeDeleteHooks []TemplateHeaderHook
var templateHeaderAfterDeleteHooks []TemplateHeaderHook

var templateHeaderBeforeUpsertHooks []TemplateHeaderHook
var templateHeaderAfterUpsertHooks []TemplateHeaderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TemplateHeader) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TemplateHeader) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TemplateHeader) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TemplateHeader) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TemplateHeader) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TemplateHeader) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TemplateHeader) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TemplateHeader) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TemplateHeader) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templateHeaderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTemplateHeaderHook registers your hook function for all future operations.
func AddTemplateHeaderHook(hookPoint boil.HookPoint, templateHeaderHook TemplateHeaderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		templateHeaderAfterSelectHooks = append(templateHeaderAfterSelectHooks, templateHeaderHook)
	case boil.BeforeInsertHook:
		templateHeaderBeforeInsertHooks = append(templateHeaderBeforeInsertHooks, templateHeaderHook)
	case boil.AfterInsertHook:
		templateHeaderAfterInsertHooks = append(templateHeaderAfterInsertHooks, templateHeaderHook)
	case boil.BeforeUpdateHook:
		templateHeaderBeforeUpdateHooks = append(templateHeaderBeforeUpdateHooks, templateHeaderHook)
	case boil.AfterUpdateHook:
		templateHeaderAfterUpdateHooks = append(templateHeaderAfterUpdateHooks, templateHeaderHook)
	case boil.BeforeDeleteHook:
		templateHeaderBeforeDeleteHooks = append(templateHeaderBeforeDeleteHooks, templateHeaderHook)
	case boil.AfterDeleteHook:
		templateHeaderAfterDeleteHooks = append(templateHeaderAfterDeleteHooks, templateHeaderHook)
	case boil.BeforeUpsertHook:
		templateHeaderBeforeUpsertHooks = append(templateHeaderBeforeUpsertHooks, templateHeaderHook)
	case boil.AfterUpsertHook:
		templateHeaderAfterUpsertHooks = append(templateHeaderAfterUpsertHooks, templateHeaderHook)
	}
}

// One returns a single templateHeader record from the query.
func (q templateHeaderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TemplateHeader, error) {
	o := &TemplateHeader{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for template_header")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TemplateHeader records from the query.
func (q templateHeaderQuery) All(ctx context.Context, exec boil.ContextExecutor) (TemplateHeaderSlice, error) {
	var o []*TemplateHeader

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TemplateHeader slice")
	}

	if len(templateHeaderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TemplateHeader records in the query.
func (q templateHeaderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count template_header rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q templateHeaderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if template_header exists")
	}

	return count > 0, nil
}

// NameTemplateRoles retrieves all the template_role's TemplateRoles with an executor via name column.
func (o *TemplateHeader) NameTemplateRoles(mods ...qm.QueryMod) templateRoleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"template_role\".\"name\"=?", o.Name),
	)

	return TemplateRoles(queryMods...)
}

// LoadNameTemplateRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templateHeaderL) LoadNameTemplateRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplateHeader interface{}, mods queries.Applicator) error {
	var slice []*TemplateHeader
	var object *TemplateHeader

	if singular {
		var ok bool
		object, ok = maybeTemplateHeader.(*TemplateHeader)
		if !ok {
			object = new(TemplateHeader)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplateHeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplateHeader))
			}
		}
	} else {
		s, ok := maybeTemplateHeader.(*[]*TemplateHeader)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplateHeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplateHeader))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateHeaderR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateHeaderR{}
			}

			for _, a := range args {
				if a == obj.Name {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`template_role`),
		qm.WhereIn(`template_role.name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load template_role")
	}

	var resultSlice []*TemplateRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice template_role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on template_role")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_role")
	}

	if len(templateRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NameTemplateRoles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &templateRoleR{}
			}
			foreign.R.NameTemplateHeader = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Name == foreign.Name {
				local.R.NameTemplateRoles = append(local.R.NameTemplateRoles, foreign)
				if foreign.R == nil {
					foreign.R = &templateRoleR{}
				}
				foreign.R.NameTemplateHeader = local
				break
			}
		}
	}

	return nil
}

// AddNameTemplateRoles adds the given related objects to the existing relationships
// of the template_header, optionally inserting them as new records.
// Appends related to o.R.NameTemplateRoles.
// Sets related.R.NameTemplateHeader appropriately.
func (o *TemplateHeader) AddNameTemplateRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TemplateRole) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Name = o.Name
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"template_role\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"name"}),
				strmangle.WhereClause("\"", "\"", 2, templateRolePrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.Roleid, rel.Name}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Name = o.Name
		}
	}

	if o.R == nil {
		o.R = &templateHeaderR{
			NameTemplateRoles: related,
		}
	} else {
		o.R.NameTemplateRoles = append(o.R.NameTemplateRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &templateRoleR{
				NameTemplateHeader: o,
			}
		} else {
			rel.R.NameTemplateHeader = o
		}
	}
	return nil
}

// TemplateHeaders retrieves all the records using an executor.
func TemplateHeaders(mods ...qm.QueryMod) templateHeaderQuery {
	mods = append(mods, qm.From("\"template_header\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"template_header\".*"})
	}

	return templateHeaderQuery{q}
}

// FindTemplateHeader retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplateHeader(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*TemplateHeader, error) {
	templateHeaderObj := &TemplateHeader{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"template_header\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, templateHeaderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from template_header")
	}

	if err = templateHeaderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return templateHeaderObj, err
	}

	return templateHeaderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TemplateHeader) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_header provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateHeaderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templateHeaderInsertCacheMut.RLock()
	cache, cached := templateHeaderInsertCache[key]
	templateHeaderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templateHeaderAllColumns,
			templateHeaderColumnsWithDefault,
			templateHeaderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templateHeaderType, templateHeaderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templateHeaderType, templateHeaderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"template_header\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"template_header\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into template_header")
	}

	if !cached {
		templateHeaderInsertCacheMut.Lock()
		templateHeaderInsertCache[key] = cache
		templateHeaderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TemplateHeader.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TemplateHeader) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	templateHeaderUpdateCacheMut.RLock()
	cache, cached := templateHeaderUpdateCache[key]
	templateHeaderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templateHeaderAllColumns,
			templateHeaderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update template_header, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"template_header\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, templateHeaderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templateHeaderType, templateHeaderMapping, append(wl, templateHeaderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update template_header row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for template_header")
	}

	if !cached {
		templateHeaderUpdateCacheMut.Lock()
		templateHeaderUpdateCache[key] = cache
		templateHeaderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q templateHeaderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for template_header")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for template_header")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplateHeaderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"template_header\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, templateHeaderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in templateHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all templateHeader")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TemplateHeader) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_header provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateHeaderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templateHeaderUpsertCacheMut.RLock()
	cache, cached := templateHeaderUpsertCache[key]
	templateHeaderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			templateHeaderAllColumns,
			templateHeaderColumnsWithDefault,
			templateHeaderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			templateHeaderAllColumns,
			templateHeaderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert template_header, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(templateHeaderPrimaryKeyColumns))
			copy(conflict, templateHeaderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"template_header\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(templateHeaderType, templateHeaderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templateHeaderType, templateHeaderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert template_header")
	}

	if !cached {
		templateHeaderUpsertCacheMut.Lock()
		templateHeaderUpsertCache[key] = cache
		templateHeaderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TemplateHeader record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TemplateHeader) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TemplateHeader provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templateHeaderPrimaryKeyMapping)
	sql := "DELETE FROM \"template_header\" WHERE \"name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from template_header")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for template_header")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templateHeaderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no templateHeaderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from template_header")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_header")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplateHeaderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(templateHeaderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"template_header\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateHeaderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from templateHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_header")
	}

	if len(templateHeaderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TemplateHeader) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTemplateHeader(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplateHeaderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplateHeaderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"template_header\".* FROM \"template_header\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateHeaderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TemplateHeaderSlice")
	}

	*o = slice

	return nil
}

// TemplateHeaderExists checks if the TemplateHeader row exists.
func TemplateHeaderExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"template_header\" where \"name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, name)
	}
	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if template_header exists")
	}

	return exists, nil
}

// Exists checks if the TemplateHeader row exists.
func (o *TemplateHeader) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TemplateHeaderExists(ctx, exec, o.Name)
}
